#! /bin/bash


export CLIENT_ID=890a211eefbc4f1391980984135ebb86
export CLIENT_SECRET=e36691e8a022440fa44b6eecd007a06d

export ACCESS_TOKEN_FILE=/tmp/av-access-token
export API_URL_FILE=/tmp/av-api-url
export VI_FILE=/tmp/av-vi



########################################################################################################################
# Indicates whether given args contain "-uid" or not.
#     --> Out: $args_uid_only
########################################################################################################################

_args_uid_only () {
    args_uid_only=0
    for i in $*
    do
        if test "$i" = "--uid-only"
        then
            args_uid_only=1
        fi
    done
}



########################################################################################################################
# Entities given in args
#     --> Out: $entities
########################################################################################################################

_entities () {
    entities="systems"
    for i in $*
    do
        j=`echo $i | awk -F/ '{print $2}'`
        if test -n "$j"
        then
            entities=$j
        fi
    done
}



########################################################################################################################
# Shows help
########################################################################################################################

_help () {
    echo
    echo "Usage: av command [options]"
    echo
    echo "Available commands:"
    echo "    * av ssh"
    echo "    * av ls"
    echo "    * av find"
    echo "    * av cat"
    echo "    * av vi"
    echo
    echo "For a complete documentation of these commands, please refer to: https://github.com/bmiegemolle/airvantage-api-shell"
    echo
}



########################################################################################################################
# Retrieve an access token, and store it in a /tmp file used by further av commands
#     --> $2: host --> the host name, such as qa-trunk.airvantage.net
########################################################################################################################

_ssh () {
    HOST=$2
    
    echo -n "username: "
    read USERNAME
    echo -n "password: "
    read -s PASSWORD
    echo

    curl -s "https://$HOST/api/oauth/token?grant_type=password&username=$USERNAME&password=$PASSWORD&client_id=$CLIENT_ID&client_secret=$CLIENT_SECRET" | jq '.access_token' | awk -F\" '{print $2}' > $ACCESS_TOKEN_FILE
    
    if test -z `cat $ACCESS_TOKEN_FILE`
    then
        echo
        echo "A problem occurred while requesting an access token"
        echo
        exit 1
    fi

    echo "https://$HOST/api/v1" > $API_URL_FILE

    echo
    echo "Access granted! You can now use av commands!"
    echo "    --> API URL: `cat $API_URL_FILE`"
    echo "    --> Access token: `cat $ACCESS_TOKEN_FILE`"
    echo
}



########################################################################################################################
# Displays the details of the user associated with the current OAuth token
########################################################################################################################

_whoami () {
    BASE_URL=`cat $API_URL_FILE`
    ACCESS_TOKEN=`cat $ACCESS_TOKEN_FILE`
    
    curl -s "$BASE_URL/users/current?access_token=$ACCESS_TOKEN" | jq -c '.'
}



########################################################################################################################
# List all entities (systems by default)
#     --> $*: /entities --> the entities to list (/systems by default)
#             --uid-only --> whether only the uid should be displayed or the whole entities
########################################################################################################################

_ls () {
    BASE_URL=`cat $API_URL_FILE`
    ACCESS_TOKEN=`cat $ACCESS_TOKEN_FILE`
    
    _args_uid_only $*
    _entities $*
    
    if test $args_uid_only -eq 1
    then
        curl -s "$BASE_URL/$entities?access_token=$ACCESS_TOKEN" | jq -c '.items[] | {uid}' | awk -Fuid '{print $2}' | awk -F\" '{print $3}'
    else
        curl -s "$BASE_URL/$entities?access_token=$ACCESS_TOKEN" | jq -c '.items[] | {uid}'
    fi
}



########################################################################################################################
# Find entities (systems by default)
#     --> $2: -field --> the field to filter
#     --> $3: value --> the filter value
#     --> $*: /entities --> the entities to list (/systems by default)
#             --uid-only --> whether only the uid should be displayed or the whole entities
########################################################################################################################

_find () {
    BASE_URL=`cat $API_URL_FILE`
    ACCESS_TOKEN=`cat $ACCESS_TOKEN_FILE`
    
    FIELD=`echo $2 | awk -F- '{print $2}'`
    VALUE=$3

    _args_uid_only $*
    _entities $*

    if test $args_uid_only -eq 1
    then
        curl -s "$BASE_URL/$entities?$FIELD=$VALUE&access_token=$ACCESS_TOKEN" | jq -c ".items[] | {uid, $FIELD}" | awk -Fuid '{print $2}' | awk -F\" '{print $3}'
    else
        curl -s "$BASE_URL/$entities?$FIELD=$VALUE&access_token=$ACCESS_TOKEN" | jq -c ".items[] | {uid, $FIELD}"  
    fi
}



########################################################################################################################
# Get entity details
#     --> $2: the entities/uid to display. Possibilities are:
#                  /entities
#                  /entities/uid
#                  uid
#              if entities is not specified, then systems are queries by default
#              if uid is not specified, then uids are retrieved from standard input
########################################################################################################################

_cat () {
    BASE_URL=`cat $API_URL_FILE`
    ACCESS_TOKEN=`cat $ACCESS_TOKEN_FILE`
    
    _entities $*

    if test -n "`echo $2 | awk -F/ '{print $3}'`"
    then
        ID=`echo $2 | awk -F/ '{print $3}'`
    elif test -z "`echo $2 | awk -F / '{print $2}'`"
    then
        ID=$2
    else
        ID=""
    fi

    if test -n "$ID"
    then
        curl -s "$BASE_URL/$entities?uid=$ID&access_token=$ACCESS_TOKEN" | jq -c '.items[]'
    else
        EXIT=0
        while test $EXIT -eq 0
        do
            read ID
            EXIT=$?
            if test $EXIT -eq 0
            then
                curl -s "$BASE_URL/$entities?uid=$ID&access_token=$ACCESS_TOKEN" | jq -c '.items[]'
            fi
        done
    fi
}



########################################################################################################################
# Edit entity details
#     --> $2: the entities/uid to edit. Possibilities are:
#                  /entities/uid
#                  uid
#              if entities is not specified, then systems are queries by default
########################################################################################################################

_vi () {
    BASE_URL=`cat $API_URL_FILE`
    ACCESS_TOKEN=`cat $ACCESS_TOKEN_FILE`
    
    _entities $*

    if test -n "`echo $2 | awk -F/ '{print $3}'`"
    then
        ID=`echo $2 | awk -F/ '{print $3}'`
    elif test -z "`echo $2 | awk -F / '{print $2}'`"
    then
        ID=$2
    else
        ID=""
    fi

    if test -n "$ID"
    then
        curl -s "$BASE_URL/$entities?uid=$ID&access_token=$ACCESS_TOKEN" | jq '.items[]' > $VI_FILE
    fi
 
    lastModificationTimeBeforeVi=`stat $VI_FILE -c "%Y"`
    vi $VI_FILE
    lastModificationTimeAfterVi=`stat $VI_FILE -c "%Y"`

    if test $lastModificationTimeAfterVi -gt $lastModificationTimeBeforeVi
    then
        curl -s "$BASE_URL/$entities/$ID?access_token=$ACCESS_TOKEN" -H 'Content-Type: application/json' -X PUT -d "`cat $VI_FILE`" | jq -c .
    fi
}



########################################################################################################################
# Main
########################################################################################################################

if test $# -eq 0
then
    _help
    exit 1
fi

case "$1" in
    "help")
        _help
        ;;
    "ssh")
        _ssh $*
        ;;
    "whoami")
        _whoami $*
        ;;
    "ls")
        _ls $*
        ;;
    "find")
        _find $*
        ;;
    "cat")
        _cat $*
        ;;
    "vi")
        _vi $*
        ;;
    *)
        _help
        exit 1
        ;;
esac

